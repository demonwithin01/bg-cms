@using ContentManagementSystem.Framework.Models.HomePage;
@model Ribbon

@helper RenderRibbonItem( RibbonItem ribbonItem, string index )
{
string idIndex = "Items_" + index + "__";
string nameIndex = "Items[" + index + "].";
string backgroundColor = ribbonItem.Background ?? "transparent";
string height = ribbonItem.Height;

if ( string.IsNullOrEmpty( height ) )
{
    height = "60px";
}

<div class="ribbon-item editable @( ribbonItem.RemovePadding ? "no-padding" : "" )" data-index="@index" style="background-color: @backgroundColor; height: @height;">
    <div class="b-grid">
        @for ( int i = 0 ; i < ribbonItem.Columns.Count ; i++ )
        {
        <div class="editable b-width-1-@ribbonItem.Columns.Count">
            @Html.Raw( ribbonItem.Columns[ i ].Html )
        </div>
        <textarea style="display: none;" id="@( idIndex + "Columns_" + i + "__Html" )" name="@( nameIndex + "Columns[" + i + "].Html" )">
            @Html.Raw( ribbonItem.Columns[ i ].Html )
        </textarea>
        }
    </div>
    <div class="ribbon-item-tools">
        <input type="hidden" id="@( idIndex + "Height" )" name="@( nameIndex + "Height" )" value="@height" />
        <div class="ribbon-item-template ui-front">
            @Html.DropDownList( nameIndex + "Layout", CreateSelectList.FromEnum<RibbonColumns>( ribbonItem.Layout ), new { id = idIndex + "Layout", @class = "column-layout" } )
            @Html.DropDownList( nameIndex + "RemovePadding", CreateSelectList.ForBoolean( ribbonItem.RemovePadding ), new { id = idIndex + "RemovePadding", @class = "padding-option" } )
        </div>
        <div class="remove-ribbon-item">
            <i class="fa fa-close"></i>
        </div>
        <div class="ribbon-item-color-picker">
            <input id="@( idIndex + "Background" )" name="@( nameIndex + "Background" )" type="hidden" value="@backgroundColor" />
            <input type="color" />
        </div>
        <div class="ribbon-item-height">
            Height: <span>@height</span>
        </div>
        <div class="adjust-height"></div>
    </div>
</div>
}

<div id="ribbon-items">
    @for ( int i = 0 ; i < Model.Items.Count ; i++ )
    {
    @RenderRibbonItem( Model.Items[ i ], i.ToString() )
    }
</div>

@Html.Button( "Add Item", ButtonType.Secondary, "add-ribbon-item" )

<div id="ribbon-item-template" style="display: none;">
    @{
        RibbonItem template = new RibbonItem();
        template.Columns.Add( new RibbonItemContent() );
    }
    @RenderRibbonItem( template, "template" )
</div>

<div id="columnPopup" style="display: none;">
    <div class="modal-content">
        <textarea id="columnContent"></textarea>
        <div class="button-list text-right margin-top">
            @Html.Button( "Cancel", ButtonType.Cancel, "cancelColumnContent" )
            @Html.Button( "Accept", ButtonType.Primary, "acceptColumnContent" )
        </div>
    </div>
</div>

<script>

    var currentIndex = @Model.Items.Count;
    var currentGrid = undefined;
    var ckeditor = undefined;

    function attachEvents( $ribbon )
    {
        $ribbon.find('input, select, textarea').each(function ()
        {
            var $this = $(this);
            var name = $this.attr('name');
            var id = $this.attr('id');

            if ( name )
            {
                $this.attr('name', name.replace(/\[+[a-z]+\]/g, '[' + currentIndex + ']'));
            }

            if ( id )
            {
                $this.attr('id', id.replace(/_+[a-z]+_/g, '_' + currentIndex + '_'));
            }

            $this.removeAttr('disabled');
        });

        $ribbon.find('select.column-layout').selectmenu({
            change: function ()
            {
                configureForColumns($ribbon, $(this).val());
            }
        });

        $ribbon.find('select.padding-option').selectmenu({
            change: function ()
            {
                $ribbon.toggleClass('no-padding', $(this).val() == 'true');
            }
        })
        
        $ribbon.find('select').each(function () {
            $(this).next().css('width', 'auto');
        });

        $ribbon.find('label').each(function ()
        {
            var $this = $(this);
            $this.attr('for', $this.attr('for').replace(/_+[a-z]+_/g, '_' + currentIndex + '_'));
        });

        $ribbon.find('.ribbon-item-height').on('click', function ()
        {
            $ribbon.find( '.ribbon-item-tools > input' ).val( 'auto' );
            $ribbon.css({height: 'auto'});

            $(this).children('span').text('auto');
        });

        $ribbon.find('[type="color"]').spectrum({
            color: 'transparent',
            showInput: true,
            allowEmpty: true,
            showPalette: true,
            showInitial: true,
            showAlpha: true,
            palette: [
                ['black', 'white', 'blue', 'red'],
                ['green', 'orange']
            ],
            move: function (color)
            {
                $ribbon.css('background-color', convertColor(color));
            },
            hide: function (color)
            {
                var value = convertColor(color);
                $ribbon.css('background-color', value);
                console.log($ribbon.find('[type="color"]').prev('input').val(value).val());
            }
        });

        $ribbon.resizable({
            handles: 's',
            stop: function ()
            {
                var height = parseInt( $ribbon.css('height').replace('px', '') );
                $ribbon.find( '.ribbon-item-tools > input' ).val( height );

                $ribbon.find('.ribbon-item-height > span').text(height + 'px');
            }
        });

        $ribbon.children().on('mouseout', function (e)
        {
            e.stopPropagation();
        });

        $ribbon.on('mouseout', function (e)
        {
            var $related = $(e.relatedTarget);

            if ( !$related.is($ribbon) && $related.closest('.ribbon-item').is($ribbon) )
            {
                return;
            }
            $ribbon.find('select').selectmenu('close');
        });
    }

    function convertColor( color )
    {
        if ( color )
        {
            var value = color.toRgb();
            return 'rgba(' + value.r + ',' + value.g + ',' + value.b + ',' + value.a + ')';
        }

        return 'rgba(0, 0, 0, 0)';
    }

    function addRibbonItem()
    {
        var $clone = $( '#ribbon-item-template' ).children().clone();

        $clone.attr('data-index', currentIndex);

        attachEvents( $clone );

        ++currentIndex;

        $('#ribbon-items').append($clone);
    }

    function configureForColumns($ribbon, value)
    {
        var html = new Array();
        var columnWidths = new Array();
        var $grid = $ribbon.children('.b-grid');

        $grid.children().each(function ()
        {
            html.push($(this).html());
        });

        $grid.empty();

        switch (value)
        {
            case '1':
                columnWidths.push('1-1');
                break;
            case '2':
                columnWidths.push('1-2');
                columnWidths.push('1-2');
                break;
            case '3':
                columnWidths.push('1-3');
                columnWidths.push('1-3');
                columnWidths.push('1-3');
                break;
        }

        var index = $ribbon.attr('data-index');

        for ( var i = 0; i < columnWidths.length; i++ )
        {
            var $div = $('<div class="editable b-width-' + columnWidths[i] + '"></div>');
            var $input = $('<textarea style="display: none;" id="Items_' + index + '__Columns_' + i + '__Html" name="Items[' + index + '].Columns[' + i + '].Html"></textarea>');

            if ( i < html.length )
            {
                $div.html( html[i] );
                $input.val( html[i] );
            }

            $grid.append($div);
            $grid.append($input);
        }
    }

    function acceptModalChanges()
    {
        var html = ckeditor.getData();
        currentGrid.html(html);
        currentGrid.next().val(html);
        $('#columnPopup').bgmodal('close');
    }

    function cancelModalChanges()
    {
        $('#columnPopup').bgmodal('close');
    }

    $( function ()
    {
        $( '#ribbon-item-template' ).find('input, select').attr('disabled', 'disabled');

        $( '#add-ribbon-item' ).on( 'click', addRibbonItem );

        $(document).on('click', '.remove-ribbon-item', function ()
        {
            $(this).closest('.ribbon-item').remove();
        });

        $(document).on('click', '.ribbon-item > .b-grid .editable', function ()
        {
            currentGrid = $(this);
            ckeditor.setData(currentGrid.html());
            $('#columnPopup').bgmodal('open');
        });

        CKEDITOR.replace('columnContent');
        ckeditor = CKEDITOR.instances['columnContent'];

        $('#cancelColumnContent').on('click', cancelModalChanges);
        $('#acceptColumnContent').on('click', acceptModalChanges);

        $('#columnPopup').bgmodal(
        {
            autoOpen: false
        });

        $('#ribbon-items > .ribbon-item').each(function ()
        {
            attachEvents( $(this));
        });
    } );

</script>